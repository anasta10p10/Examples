# Загрузить из файла `array_hw.npy` массив и сохранить его как `arr`. Массив содержит объёмы продаж мороженого (в штуках) 
# в 5 магазинах за одну неделю в июне (7 дней, с понедельника до воскресенья). 
# В заданиях 2-5 нужно работать с массивом `arr`.
import numpy as np
arr = np.load('array_hw.npy')
print(arr)
# Если думать о массиве `arr` как о таблице, сейчас в таблице магазины идут по столбцам (1 магазин = 1 столбец, всего 5), 
# а дни – по строкам (1 день = 1 строка, всего 7). Преобразовать массив `arr` таким образом, чтобы по строкам шли магазины,
# а по столбцам – дни (1 строка = 1 магазин). 
# Сохранить изменения. Проверить, что форма массива изменилась.
arr = arr.transpose()
print(arr)
# Давайте представим, что информация по продажам обновилась: оказалось, что пятый магазин в воскресенье продал не 19 порций мороженого, 
# а 25, и второй магазин продал во вторник не 55 порций, а 65.
# Изменить массив `arr` в соответствии с этой информацией.
arr[1][1] = 65
arr[4][6] = 25
print(arr)
# Посчитать суммарный объём продаж мороженого по всем магазинам.
print(arr.sum())
# Выгрузить обновлённый массив `arr` в txt-файл. 
# Сам txt-файл загружать в систему не нужно, только написать соответствующий код в ipynb-файл.
np.savetxt('arr.txt', arr)
# Дан массив `income`, содержащий значения прибыли магазина в тысячах на начало, середину и конец года, за четыре года подряд 
# (значения никак не сгруппированы, можно считать, что они так выгрузились из файла). 
# Изменить форму массива так, чтобы значения были сгруппированы по три значения в каждом списке внутри массива 
# (прибыль на начало, середину и конец года).
income = np.array([1000, 2000, 3500, 
                   2500, 1500, 3800, 
                   1200, 9000, 12000,
                   4500, 6700, 11000])
x = income.reshape(4,3)
print(x)
# Создать список `turnout` (*list*, не массив), содержащий следующие значения явки на избирательные участки в процентах:
# 23.56, 45.78, 34.92, 57.34, 56.55, 67.23.
# Создать, используя списковые включения и встроенные, не из `NumPy`, функции для округления, новый список `turnout_r`, 
# который состоит из округлённых до первого знака после запятой значений явки из `turnout`.
turnout = [23.56, 45.78, 34.92, 57.34, 56.55, 67.23]
turnout_r = [round(i,1) for i in turnout]
print(turnout_r)
# Выполнить те же операции, что и в предыдущей задаче, но с использованием массивов и функций `NumPy`. 
# Другими словами, создать массив `turnout` и на его основе создать массив `turnout_r` с округлёнными до первого знака значениями явки.
turnout = np.array([23.56, 45.78, 34.92, 57.34, 56.55, 67.23])
turnout_r = turnout.round(1)
print(turnout_r)
# Зайдите на [страницу](https://ru.wikipedia.org/wiki/%D0%9C%D0%B5%D0%B6%D0%B4%D1%83%D0%BD%D0%B0%D1%80%D0%BE%D0%B4%D0%BD%D1%8B%D0%B9_%D0%B8%D0%BD%D0%B4%D0%B5%D0%BA%D1%81_%D1%81%D1%87%D0%B0%D1%81%D1%82%D1%8C%D1%8F)
# Википедии, посвящённую Международному индексу счастья, выберите из таблицы **2012 Международный индекс счастья** любые 5 стран 
# и любые 3 показателя и создайте структурированный массив `happy`, такой, в котором есть поле «название страны» и поля для трёх 
# выбранных показателей. Выберите подходящий тип для каждого поля (показателя) в массиве и учтите это при создание 
# структурированного массива. Выведите полученный массив на экран.
happy = np.array([('Switzerland', 55.3, 82.3, 5.0),
                  ('Britain', 47.9, 80.2, 4.70), 
                  ('Japan', 47.5, 83.4, 4.2), 
                  ('Norway', 51.4, 81.1, 4.8),
                  ('India', 50.9, 65.4, 0.9)],
            dtype=[('name', '<U10' ),('HPI', float), ('life', float), ('env', float)])
print(happy)
# Сконвертируйте полученный в предыдущей задаче структурированный массив в обычный список и выведите на экран его второй элемент.
print(happy.tolist()[2])